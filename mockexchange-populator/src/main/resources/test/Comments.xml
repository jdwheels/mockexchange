<?xml version="1.0" encoding="utf-8"?>
<comments>
  <row Id="3" PostId="3" Score="2" Text="Good naming convention and well structured code will help you decrease the comments need. Don`t forget that each line of comments you add it's a new line to maintain!!" CreationDate="2010-09-01T19:47:32.873" UserId="28" ContentLicense="CC BY-SA 2.5" />
  <row Id="8" PostId="3" Score="0" Text="@Gabriel: that was already in my answer, look at the end." CreationDate="2010-09-01T19:51:45.260" UserId="11" ContentLicense="CC BY-SA 2.5" />
  <row Id="16" PostId="3" Score="1" Text="@Lorenzo: sorry, I've read it and did not catch this one..." CreationDate="2010-09-01T20:01:02.077" UserId="28" ContentLicense="CC BY-SA 2.5" />
  <row Id="18" PostId="3" Score="81" Text="I hate when people use that second example in your question. `} //end while` just means the beginning of the while loop is so far away, you can't even see it, and there are no hints that the code you're looking at is in a loop. Heavy refactoring should be seriously preferred to comments about how the code is structured." CreationDate="2010-09-01T20:03:16.253" UserId="54" ContentLicense="CC BY-SA 2.5" />
  <row Id="33" PostId="3" Score="4" Text="@Carson: while keeping blocks short is a well known rule, it doesn't mean that we always can apply it." CreationDate="2010-09-01T20:15:59.773" UserId="11" ContentLicense="CC BY-SA 2.5" />
  <row Id="284" PostId="3" Score="4" Text="@Carson:  One of the projects I work on has insufficient code review, which lead to a collection of JSPs with a cyclomatic complexity of &quot;OMFG JUST KILL YOURSELF.&quot;  Refactoring the bloody things represents days of work that need to be spent elsewhere.  Those `} // end while` comments can be a lifesaver." CreationDate="2010-09-02T15:26:23.480" UserId="17" ContentLicense="CC BY-SA 2.5" />
  <row Id="1421" PostId="298" Score="26" Text="I agree with the why not how part, and your refactoring works in this example, but with more complex code, no amount of variable/function renaming/refactoring is gonna have it make perfect sense, and comments will still be needed there." CreationDate="2010-09-09T02:09:08.127" UserId="190" ContentLicense="CC BY-SA 2.5" />
  <row Id="2105" PostId="814" Score="1" Text="Comments can become stale, but that's true for everything that's not verified by a compiler or a unit test, like the meaning of class, function and variable names." CreationDate="2010-09-10T08:39:42.203" UserId="552" ContentLicense="CC BY-SA 2.5" />
  <row Id="2216" PostId="814" Score="0" Text="@Lenny222: Yes, comments can become stale...which is usually indicative of lazy programmers. If the comment describes why a descision was made, why the code uses a particular algorithm for computation, or describes how the code functions, then there is no reason for the comment to become stale other than someone changing the implementation and not updating the comment accordingly -- which is equivalent to being lazy." CreationDate="2010-09-10T15:22:20.360" UserId="164" ContentLicense="CC BY-SA 2.5" />
  <row Id="2217" PostId="814" Score="2" Text="I agree. My point is, there is a risk of it becoming stale, yes. But when i have a function doBar() and after 3 years it doesn't &quot;do bar&quot;, but it &quot;does bar and foo except on wednesdays&quot; then the meaning of functions can get stale too. And variable names. But i hope noone takes this for a reason to not give functions and variables meaningful names." CreationDate="2010-09-10T15:25:45.993" UserId="552" ContentLicense="CC BY-SA 2.5" />
  <row Id="2844" PostId="3" Score="11" Text="@BlairHippo: &quot;[A] code smell is any symptom in the source code of a program that possibly indicates a deeper problem&quot;. Of course the comment is a life saver, but the OMGWTF-loop is the aforementioned &quot;deeper problem&quot; and the necessity of the life saver is a clear indicator ;)" CreationDate="2010-09-12T18:10:31.970" UserId="667" ContentLicense="CC BY-SA 2.5" />
  <row Id="3257" PostId="13" Score="8" Text="I agree with this answer vis a vis comments, but I've also seen it cited as an excuse for lack of documentation, which is wrong. Reading code is a pain in the ass sometimes. You shouldn't *have* to look at the code for a method to figure out what that method does. You should be able to figure it out from the name and get some more details from the docs. When reading code, you often have to switch from class to class, and file to file. This especially a problem in dynamic languages, where writing an IDE that can handle all this is non-trivial." CreationDate="2010-09-14T01:48:33.953" UserId="1664" ContentLicense="CC BY-SA 2.5" />
  <row Id="3278" PostId="3" Score="0" Text="If you get value out of comments that could in principle be automatically generated, then you either need a better language or text editor." CreationDate="2010-09-14T03:59:35.227" UserId="1343" ContentLicense="CC BY-SA 2.5" />
  <row Id="3428" PostId="3" Score="0" Text="@Winston: agree. If you have a powerful &quot;intellisense&quot;, or a better language, you don't need this &quot;code block comment&quot;. But if you don't have it..." CreationDate="2010-09-14T14:44:32.407" UserId="11" ContentLicense="CC BY-SA 2.5" />
  <row Id="3437" PostId="3" Score="0" Text="@back2dos:  Point.  :-)" CreationDate="2010-09-14T15:19:09.183" UserId="17" ContentLicense="CC BY-SA 2.5" />
  <row Id="3561" PostId="13" Score="1" Text="Anyway, sometimes you have also to comment the HOW if itÂ´s complicated (specially if it's optimized or any other kind of non-trivial operations). If I have to spend more than 5 minutes reading one block of code to understand what it's doing, can be pretty frustrating..." CreationDate="2010-09-14T21:46:24.983" UserId="1571" ContentLicense="CC BY-SA 2.5" />
  <row Id="3617" PostId="482" Score="16" Text="I'm curious to look at &quot;well-named, very clean, uncommented code&quot; that is hard to follow. Any code that I would classify as such has been very easy to follow. I certainly wouldn't go as far as &quot;Your co-worker is not experienced enough, obviously&quot;." CreationDate="2010-09-15T01:34:01.270" UserId="1853" ContentLicense="CC BY-SA 2.5" />
  <row Id="3945" PostId="482" Score="8" Text="@Liggy: I would. It's a research algorithm, not a line-of-business application." CreationDate="2010-09-15T17:14:34.653" UserId="148" ContentLicense="CC BY-SA 2.5" />
  <row Id="4315" PostId="2837" Score="1" Text="This is what I do. If you think you need comments, I can heartily recommend trying this as a replacement." CreationDate="2010-09-16T07:15:50.760" UserId="2189" ContentLicense="CC BY-SA 2.5" />
  <row Id="4694" PostId="1" Score="44" Text="I'm going to upvote any answer that says &quot;no&quot;." CreationDate="2010-09-16T22:21:03.907" UserId="2314" ContentLicense="CC BY-SA 2.5" />
  <row Id="5156" PostId="3" Score="0" Text="@back2dos Great comment" CreationDate="2010-09-17T20:30:49.193" UserId="2314" ContentLicense="CC BY-SA 2.5" />
  <row Id="5157" PostId="1680" Score="8" Text="+1 To any dev who hasn't been working on a single project long enough to experience this, believe me it **will** happen.  Anytime I learn this the hard way and have to relearn my own code, I don't let myself make the same mistake twice and comment it before I move on to something else." CreationDate="2010-09-17T20:33:29.977" UserId="2314" ContentLicense="CC BY-SA 2.5" />
  <row Id="9153" PostId="482" Score="9" Text="I once had a piece of code where you had to populate fields in a database column object (3rd party) in the &quot;wrong&quot; order (defined by the &quot;logic&quot; of the process and our coding standards) - do it in the order we'd normally use and it would crash. No amount of reading the code could tell you this so it positively, absolutely, had to have a comment - and it wasn't a smell, at least not in code over which we had control (which is the bottom line). A complete and utter lack of comments is as much a smell as poor comments." CreationDate="2010-09-27T07:28:55.737" UserId="866" ContentLicense="CC BY-SA 2.5" />
  <row Id="9154" PostId="3355" Score="1" Text="Or, alternatively, the comment may reflect the fact that the code is addressing a complex algorithm where the code becomes inherently not obvious or because the code is doing something odd due to factors beyond your control (e.g. interacting with an external service)." CreationDate="2010-09-27T07:37:50.823" UserId="866" ContentLicense="CC BY-SA 2.5" />
  <row Id="9167" PostId="1680" Score="0" Text="No, you should imagine a psychopath who knows where you live: will they be happy to maintain your code?" CreationDate="2010-09-27T09:54:15.757" UserId="542" ContentLicense="CC BY-SA 2.5" />
  <row Id="9202" PostId="1680" Score="4" Text="I regularily become a psychopath when i see unreadable code." CreationDate="2010-09-27T12:32:50.707" UserId="552" ContentLicense="CC BY-SA 2.5" />
  <row Id="9422" PostId="1" Score="2" Text="@Renesis That's the smell of divinity." CreationDate="2010-09-27T20:33:26.953" UserId="1398" ContentLicense="CC BY-SA 2.5" />
  <row Id="9854" PostId="3" Score="0" Text="@lorenzo @blairhippo -- no matter what you say, it's still awful and I still hate it :)" CreationDate="2010-09-28T19:18:04.333" UserId="54" ContentLicense="CC BY-SA 2.5" />
  <row Id="10427" PostId="3355" Score="0" Text="Very true. There are reasons why good code might not be obvious. Most of the time though perplexing code is perplexing because it's written in an obfuscated way." CreationDate="2010-09-29T16:56:00.697" UserId="1223" ContentLicense="CC BY-SA 2.5" />
  <row Id="11311" PostId="3" Score="1" Text="@Carson: I tend to `} // while` even if the loop is short, simply because glancing at the word &quot;while&quot; is faster than looking at indentation levels, *even if* indentation is low and the block is short. For me it's visual texture to improve readability, and nothing more." CreationDate="2010-10-01T15:10:17.107" UserId="2107" ContentLicense="CC BY-SA 2.5" />
  <row Id="11323" PostId="7508" Score="0" Text="Ah, heartfelt pleas to the future self." CreationDate="2010-10-01T15:28:46.927" UserId="3754" ContentLicense="CC BY-SA 2.5" />
  <row Id="11378" PostId="1" Score="107" Text="Your coworker made a sweeping generalization, which **automatically** means he is wrong. :)" CreationDate="2010-10-01T17:25:46.300" UserId="2983" ContentLicense="CC BY-SA 2.5" />
  <row Id="11530" PostId="482" Score="29" Text="Math, math, math. Not all code implements trivial IoC glue and 'price * quantity'. Complex math cannot be made magically to self-explain." CreationDate="2010-10-01T23:06:51.813" UserId="1403" ContentLicense="CC BY-SA 2.5" />
  <row Id="12072" PostId="482" Score="4" Text="@Liggy, code implementing complex datastructures can be completely incomprehensible without extensive documentation." CreationDate="2010-10-04T06:44:41.060" UserDisplayName="user1249" ContentLicense="CC BY-SA 2.5" />
  <row Id="12073" PostId="482" Score="1" Text="@Murph, nasty, can you remember why this was so?" CreationDate="2010-10-04T06:45:35.543" UserDisplayName="user1249" ContentLicense="CC BY-SA 2.5" />
  <row Id="12087" PostId="482" Score="2" Text="@ThorbjÃ¸rn it was an Oracle COM object being called from VB5/6 no idea why at all (other than it was, fairly obviously, a nasty and obscure bug) and it was over 10 years ago... but it illustrates the point. Similar issues now would be with things like formatting requests to web services where, for example, you have to populate redundant/optional fields despite logic and the manual (if any) telling you otherwise." CreationDate="2010-10-04T07:56:56.783" UserId="866" ContentLicense="CC BY-SA 2.5" />
  <row Id="13998" PostId="2787" Score="8" Text="I thought &quot;anti-pattern&quot; was the new &quot;considered harmful&quot;.  A code smell is just something that needs a closer review for possible cleanup." CreationDate="2010-10-07T20:58:56.543" UserId="2539" ContentLicense="CC BY-SA 2.5" />
  <row Id="14085" PostId="2787" Score="1" Text="I don't disagree that anti-pattern also qualifies.  They both get used that way with anti-pattern being used instead of smell when the design is complex enough that it is obviously a deliberate choice.  In either case I disagree with the concept that there is an absolute source of correct on these things." CreationDate="2010-10-08T01:06:25.313" UserId="841" ContentLicense="CC BY-SA 2.5" />
  <row Id="19298" PostId="1680" Score="3" Text="5 years? More like 5 minutes. ;)" CreationDate="2010-10-21T16:50:50.150" UserId="2983" ContentLicense="CC BY-SA 2.5" />
  <row Id="27579" PostId="13" Score="3" Text="&quot;Only if the comment describes what the code is doing.&quot; Or if the comment describes what the code used to do; the code has changed but the comment hasn't." CreationDate="2010-11-11T22:29:11.107" UserId="3869" ContentLicense="CC BY-SA 2.5" />
  <row Id="29694" PostId="8730" Score="0" Text="+1 for pointing out that bad comment habits start with early programming classes.  -1 for concluding that comments are only a last resort choice." CreationDate="2010-11-17T21:43:36.843" UserId="145" ContentLicense="CC BY-SA 2.5" />
  <row Id="32055" PostId="3339" Score="0" Text="Could you explain what you mean by &quot;comments that resume a block of code&quot;?" CreationDate="2010-11-23T05:23:21.583" UserId="2515" ContentLicense="CC BY-SA 2.5" />
  <row Id="32853" PostId="56" Score="7" Text="+1 for nice comments. No amount of code can say &quot;If this happens, somebody's been screwing around with the database definitions&quot;." CreationDate="2010-11-24T14:37:32.540" UserId="6579" ContentLicense="CC BY-SA 2.5" />
  <row Id="42545" PostId="13" Score="1" Text="How do you test that your comment is correct? Why not write your comment as a test? Any future maintainer can use the test as the verifiable documentation for the code. If the comment has something to do with the execution of the code, then that something /must/ be assertable. If the comment has nothing to do with the execution of the code, then what is it doing in the code where only programmers will look?" CreationDate="2010-12-13T16:49:25.893" UserId="5404" ContentLicense="CC BY-SA 2.5" />
  <row Id="43584" PostId="3" Score="0" Text="[joke]Whoaaa i++ increments by 1?!? Never knew that.. Thank god for that comment!![/joke]" CreationDate="2010-12-15T10:46:24.033" UserId="3814" ContentLicense="CC BY-SA 2.5" />
  <row Id="44078" PostId="56" Score="3" Text="Sure, remember: never use silly names. The customer will always see them." CreationDate="2010-12-15T23:28:47.040" UserId="4623" ContentLicense="CC BY-SA 2.5" />
  <row Id="49570" PostId="1" Score="1" Text="@ThorbjÃ¸rn - the examples are simplified but the principles still apply. Comments should be a last resort when all other refactoring has failed." CreationDate="2010-12-27T00:29:59.650" UserId="1724" ContentLicense="CC BY-SA 2.5" />
  <row Id="43679" PostId="13" Score="0" Text="@flamingpenguin - Even if you know what the code is doing, you still need to know why the code is doing it. Having to cross-reference the source code with the appropriate test case can be quite time consuming so why not just have &quot;This code implements process X?&quot; Of course, at that point you need to double check to make sure the comment is referring to the correct process in which case it might be wrong if someone doesn't maintain the comments." CreationDate="2010-12-15T14:03:29.560" UserId="2471" ContentLicense="CC BY-SA 2.5" />
  <row Id="43685" PostId="298" Score="3" Text="Good example, but why is the system working with cents as opposed to dollars? That question becomes relevant in financial systems where you might see fractional currency come into play." CreationDate="2010-12-15T14:07:19.137" UserId="2471" ContentLicense="CC BY-SA 2.5" />
  <row Id="43716" PostId="1" Score="0" Text="In a perfect world or in a typical real software project?" CreationDate="2010-12-15T14:39:51.373" UserId="934" ContentLicense="CC BY-SA 2.5" />
  <row Id="43854" PostId="13" Score="0" Text="@flamingpenguin: how do you write a unit test to explain that benchmarks showed using zip with a factor compression of 3 was sufficient but that if we were to increase the payload it might be worth augmenting it ? Or that using the Double-Metaphone algorithm was okay at the moment but would not work were we to have Indian clients ? I personally use a comment..." CreationDate="2010-12-15T18:07:13.453" UserId="4853" ContentLicense="CC BY-SA 2.5" />
  <row Id="43995" PostId="482" Score="0" Text="This answer reminds me of being in university days discussing Dijkstra's algorithm.  In the book, the pseudo-algorithm is a handful of lines but if you actually try to implement it you realize what the pseudo-code represents.  Its pretty, elegant, short and concise but far from straight-forward to implement." CreationDate="2010-12-15T21:51:19.847" UserId="136" ContentLicense="CC BY-SA 2.5" />
  <row Id="44029" PostId="3" Score="0" Text="@Lorenzo, why can't you keep blocks short by e.g. extracting methods, etc.?" CreationDate="2010-12-15T22:29:07.080" UserDisplayName="user1249" ContentLicense="CC BY-SA 2.5" />
  <row Id="44030" PostId="56" Score="9" Text="@Niphra, well, we _could_ throw a `SomebodyScrewedAroundWithDatabaseException`..." CreationDate="2010-12-15T22:32:55.643" UserDisplayName="user1249" ContentLicense="CC BY-SA 2.5" />
  <row Id="44034" PostId="56" Score="0" Text="@ThorbjÃ¸rn +1, If the code knows what's wrong darn well report it. The customers support tech's can probably reload their DB, and avoid a service call." CreationDate="2010-12-15T22:42:57.017" UserId="4623" ContentLicense="CC BY-SA 2.5" />
  <row Id="44075" PostId="56" Score="0" Text="@Tim, as customers may see this, a more neutral naming might be appropriate." CreationDate="2010-12-15T23:26:14.740" UserDisplayName="user1249" ContentLicense="CC BY-SA 2.5" />
  <row Id="44230" PostId="3" Score="0" Text="@ThorbjÃ¸rn: in my experience there are some __limit cases__ where splitting a function may result in less readable code, especially in some computational algorithms (like audio or video filters or data compression). Maintaining the full code in a single function __may__ greatly help understandability and readability. However, this is a question about comments, and not about the right length of blocks, so what's the point?" CreationDate="2010-12-16T09:28:44.073" UserId="11" ContentLicense="CC BY-SA 2.5" />
  <row Id="44248" PostId="13" Score="0" Text="@Matthieu M - those are rare considerations. I do try to write tests that show that the code works or doesn't in as many cases as I can. I will go to the trouble of asserting the boundary conditions if they are likely enough. I do write comments in code, but they are extremely rare and only when I fail to find a better, verifiable, way of documenting the design decisions (as you say, for example when I absolutely cannot find a way of making an assertion about a performance characteristic for example). I see a lot more lazy comments as a substitute for a proper test than the other way around." CreationDate="2010-12-16T10:17:54.667" UserId="5404" ContentLicense="CC BY-SA 2.5" />
  <row Id="44259" PostId="13" Score="0" Text="@flamingpenguin: I agree, I see a lot of useless / crappy / lazy comments too, but I prefer to avoid off-handed statements such as &quot;never comment&quot; :)" CreationDate="2010-12-16T10:58:58.703" UserId="4853" ContentLicense="CC BY-SA 2.5" />
  <row Id="44269" PostId="13" Score="1" Text="@Matthieu M - yeah, by itself &quot;never comment&quot; is no use. Maybe something like &quot;prefer tests to comments&quot; and &quot;prefer readable code to comments&quot;" CreationDate="2010-12-16T11:46:20.840" UserId="5404" ContentLicense="CC BY-SA 2.5" />
  <row Id="44272" PostId="13" Score="0" Text="@Rob Z - I put the &quot;why&quot; in my domain model method and class names. I put what the code is doing in the implementation. So I wouldn't write a method called addSeveralNumbers(). I would write getTotalInvoiceValue() in a class called &quot;ProcessXInvoice&quot;" CreationDate="2010-12-16T11:49:46.983" UserId="5404" ContentLicense="CC BY-SA 2.5" />
  <row Id="44313" PostId="13" Score="0" Text="@flamingpenguin: I like the two sentences you crafted :)" CreationDate="2010-12-16T13:58:58.163" UserId="4853" ContentLicense="CC BY-SA 2.5" />
  <row Id="44319" PostId="13" Score="0" Text="@flamingpenguin - Clear method and class names are good, but as others have noted, they don't guard against those edge cases where a comment is the fasted way of guarding against another developer changing something in the code that should not be changed. At the end of the day, so far in my career had a combination of clear variable, method, and class names along with appropriate comments where needed explaining why something was happening and where more information could be found." CreationDate="2010-12-16T14:04:41.970" UserId="2471" ContentLicense="CC BY-SA 2.5" />
  <row Id="44330" PostId="13" Score="0" Text="@Rob Z - I am not sure we should be looking for the fastest way to do something. I agree that comments are fast. But I also think they are inherently unsafe. For example, they easily get detached from the related code during refactoring (e.g. extract method) with no automated way of detecting that human error. Even if the next developer reads the comment, they will not definitely understand it. Even if they do and try not to break it, they still accidentally might. A good test, although not as fast to write, does not have these flaws. It might not always be possible, but it almost always is." CreationDate="2010-12-16T14:21:30.280" UserId="5404" ContentLicense="CC BY-SA 2.5" />
  <row Id="44333" PostId="13" Score="0" Text="@flamingpenguin - Maybe the fastest way of doing things is a poor way of describing things, but there is something to be said for having information at hand when you need it as opposed to having to look it up in a different part of the system. Having a test case to make sure the interest payment is calculated correctly is good, but having a comment in code saying something like `/* Don't truncate the fractional cents until after trade has cleared */` is also useful to developers." CreationDate="2010-12-16T14:24:52.397" UserId="2471" ContentLicense="CC BY-SA 2.5" />
  <row Id="44342" PostId="13" Score="0" Text="@Rob Z - For &quot;Don't truncate the fractional cents until after trade has cleared&quot; I would create a type to enforces this rule. It could have a method truncatedValueForAfterTheTradeHasCleared() and it could encapsulate the operations to prevent the values from being truncated. I would also write tests to assert this. This way I could know without having to read all the code whether or not the rule &quot;Don't truncate the fractional cents until after trade has cleared&quot; was actually being followed, or if someone had made a mistake. I could reuse this rule as much as I like, without duplicate comments." CreationDate="2010-12-16T14:38:57.730" UserId="5404" ContentLicense="CC BY-SA 2.5" />
  <row Id="44512" PostId="13" Score="2" Text="@back2dos, if you frequently vomit when reading other peoples code, I'm glad we are not sharing offices..." CreationDate="2010-12-16T19:57:51.050" UserDisplayName="user1249" ContentLicense="CC BY-SA 2.5" />
  <row Id="49763" PostId="1" Score="5" Text="@Mongus, I disagree. The comments in your example is bad not because they are comments, but because they are TOO close to the code which then changes.  They should say _WHY_ and not _WHAT_." CreationDate="2010-12-27T13:07:00.250" UserDisplayName="user1249" ContentLicense="CC BY-SA 2.5" />
  <row Id="61736" PostId="298" Score="0" Text="Hmmmm. Comments should primarily explain what code does, not how or why. I need to know what a function does, not why or how." CreationDate="2011-01-11T04:45:45.200" UserId="12873" ContentLicense="CC BY-SA 2.5" />
  <row Id="60919" PostId="4877" Score="1" Text="In response to 1.  The true smell in commented routines is  not deleting them right away when you decide they may be dead ends and want to try something different---this is because they should be available in version control if you decide to revisit them." CreationDate="2011-01-10T00:12:26.427" UserId="12661" ContentLicense="CC BY-SA 2.5" />
  <row Id="73766" PostId="3" Score="0" Text="C-style languages that use braces to indicate blocks of code are intended to be terse.  Indenting is supposed to make pairs of braces obvious.  I really hate it when people clutter up their code by re-implementing BASIC flow control statements in their comments.  I don't know how they cope with Python, where there are no closing braces and *everything* is done with indentation." CreationDate="2011-01-31T09:12:11.997" UserId="10562" ContentLicense="CC BY-SA 2.5" />
  <row Id="73776" PostId="3355" Score="0" Text="Seems like you've not written code for embedded processors where you only have 32k to play in, and things DO you a bid obscure. Comments are life-savers." CreationDate="2011-01-31T09:21:22.960" UserId="6279" ContentLicense="CC BY-SA 2.5" />
  <row Id="73798" PostId="1" Score="5" Text="@Alex, isn't that a sweeping generalization, which is therefore wrong (resulting in him not being wrong anyway)?" CreationDate="2011-01-31T10:25:10.567" UserDisplayName="user1249" ContentLicense="CC BY-SA 2.5" />
  <row Id="73844" PostId="482" Score="0" Text="@Paul Nathan, maybe you could post the code on codereview.stackexchange.com and then post a link to it in this answer." CreationDate="2011-01-31T11:16:44.577" UserId="685" ContentLicense="CC BY-SA 2.5" />
  <row Id="73853" PostId="1" Score="0" Text="Comments are not code. Therefore no." CreationDate="2011-01-31T11:53:17.960" UserId="11785" ContentLicense="CC BY-SA 2.5" />
  <row Id="73872" PostId="298" Score="3" Text="@Stuart the name of the function should say what it does." CreationDate="2011-01-31T12:19:38.400" UserId="13825" ContentLicense="CC BY-SA 2.5" />
  <row Id="74042" PostId="482" Score="0" Text="@Geoff: I'll look it over to see if it has a public license. It may not be. Most of the code I touch related to other people is not open source." CreationDate="2011-01-31T17:35:41.467" UserId="148" ContentLicense="CC BY-SA 2.5" />
  <row Id="74069" PostId="1" Score="0" Text="@ThorbjÃ¸rn Ravn Andersen yes, that was the point of the joke. Sweeping generalizations are pretty much always a sign that the speaker isn't thinking." CreationDate="2011-01-31T18:19:30.160" UserId="2983" ContentLicense="CC BY-SA 2.5" />
  <row Id="93953" PostId="52607" Score="0" Text="&quot;If you read some code and think it does X when in reality it does Y&quot; That's not what I said. I'm talking about understanding what code *does* do, but not what it's *supposed* to do. Let's say you suspect an off-by-one error. How do you know the off-by-one error isn't in the consuming code instead or this code? Comments explain the *intent* of the code, which helps enormously with tracking down bugs." CreationDate="2011-02-28T06:55:57.053" UserId="8107" ContentLicense="CC BY-SA 2.5" />
  <row Id="77541" PostId="298" Score="3" Text="@GSto, I couldn't disagree more.  If the code is complex, it should be broken into smaller methods/functions with appropriate names that describe the action." CreationDate="2011-02-04T05:49:39.253" UserId="2431" ContentLicense="CC BY-SA 2.5" />
  <row Id="80784" PostId="41753" Score="0" Text="But way in this day and age are you not using a high level langage?" CreationDate="2011-02-08T14:11:36.900" UserId="1114" ContentLicense="CC BY-SA 2.5" />
  <row Id="80785" PostId="298" Score="1" Text="You assume, that you have complete control over the code base." CreationDate="2011-02-08T14:13:19.380" UserId="552" ContentLicense="CC BY-SA 2.5" />
  <row Id="80829" PostId="41753" Score="2" Text="@Ian: The program is an IBM-PC bootloader.  You *can't* write it in anything other than assembly, because you need total control of exactly where the program is located in RAM, where the last short appears, and some of the hardware interrupts.  Seriously, get yourself a copy of NASM.  Assemble it, write it to the boot sector of a floppy or USB stick, and boot it.  Though you'll probably find it doesn't work as expected because of the bug.  Now find the bug...  Regardless, I'm sure that in 20 years from now, people will ask the same thing of uncommented Java." CreationDate="2011-02-08T15:02:30.470" UserId="10562" ContentLicense="CC BY-SA 2.5" />
  <row Id="88238" PostId="2787" Score="4" Text="+1 for &quot;Refactoring everything until a kindergartner can understand it is likely not an efficient use of your time, and probably will not perform as well as a more concise version.&quot;" CreationDate="2011-02-19T05:00:09.047" UserId="483" ContentLicense="CC BY-SA 2.5" />
  <row Id="82042" PostId="45444" Score="2" Text="I'm stunned that took 2 months for this answer to come up.  It demonstrates how widespread the misunderstanding of the term is." CreationDate="2011-02-10T10:17:50.647" UserId="628" ContentLicense="CC BY-SA 2.5" />
  <row Id="142843" PostId="45444" Score="0" Text="The general case assertion is still wrong. You don't say, &quot;I'm seeing commented code. That's a bad sign.&quot;" CreationDate="2011-05-30T07:37:55.467" UserId="25572" ContentLicense="CC BY-SA 3.0" />
  <row Id="93584" PostId="52607" Score="1" Text="Unit tests help a lot to determine if the results are wrong. If you read some code and think it does X when in reality it does Y, then it's possible the code isn't written in a readable enough way. I'm not sure what you mean about the results being used incorrectly. A comment will not protect you against someone consuming your code in strange ways." CreationDate="2011-02-27T15:36:36.493" UserId="226" ContentLicense="CC BY-SA 2.5" />
  <row Id="138306" PostId="41753" Score="0" Text="So which comments would you have added (without knowing there was a bug in it), and would they help you spot the bug?&#xA;For bonus points: How would unit-tests have helped you?" CreationDate="2011-05-20T11:17:09.277" UserId="4041" ContentLicense="CC BY-SA 3.0" />
  <row Id="138316" PostId="41753" Score="1" Text="When coding assembly, I'd do what everyone else does - comment every single line with what it's doing.  The line in question would have had the comment &quot;check if letter is 0&quot;, as the code uses C-style 0-terminated strings.  With that comment in place, it's easy to see that the code is doing a cmp with 1, which means it either gets stuck in an infinite loop or prints garbage until it hits a random 1 in RAM. I might also have added a comment about the fact that the strings were 0-terminated, which isn't apparent from the code.  Is there such a thing as automated unit testing for assembly coding?" CreationDate="2011-05-20T11:47:23.840" UserId="10562" ContentLicense="CC BY-SA 3.0" />
  <row Id="106920" PostId="8823" Score="0" Text="Much better to build the units into the variable names, so the poor programmer doesn't have to remember them.  Instead of 'double length // in meters' say 'double length_m'.  Best of all is to use a more powerful language, so you can simply say Length l; Force f; Torque t = l * f; print(t.in(Torque.newtonMeter));" CreationDate="2011-03-22T23:00:41.137" UserId="16929" ContentLicense="CC BY-SA 2.5" />
  <row Id="106921" PostId="41753" Score="0" Text="Surely the code could be written in C or C++, and the binary assembled from the C object code and some external tool." CreationDate="2011-03-22T23:03:48.403" UserId="16929" ContentLicense="CC BY-SA 2.5" />
  <row Id="107112" PostId="41753" Score="0" Text="Unfortunately not.  Have a look at this page on CodeProject: http://www.codeproject.com/KB/tips/boot-loader.aspx - &quot;high-level languages donât have the necessary instructions&quot;.  Not only that, but you've only got 512 bytes to play with in a bootloader.  Sometimes you just have to get directly to the hardware." CreationDate="2011-03-23T09:29:47.533" UserId="10562" ContentLicense="CC BY-SA 2.5" />
  <row Id="210982" PostId="13" Score="0" Text="@CarsonMyers Prove it." CreationDate="2011-10-21T04:45:39.317" UserId="6440" ContentLicense="CC BY-SA 3.0" />
  <row Id="187117" PostId="52607" Score="0" Text="On the other hand, the comments might only tell you what the code was supposed to do *as of the time the comments were written.* The code itself may be telling you what it's supposed to do *now.* Comments don't compile. You can't test comments. They may or may not be correct." CreationDate="2011-08-23T21:13:00.243" UserId="3754" ContentLicense="CC BY-SA 3.0" />
  <row Id="193049" PostId="1" Score="2" Text="The whole point of &quot;code smells&quot; is that they're sweeping generalizations that aren't always right. They just tell you what to look at." CreationDate="2011-09-07T13:55:14.877" UserId="34200" ContentLicense="CC BY-SA 3.0" />
  <row Id="193050" PostId="482" Score="0" Text="Your example proves the opposite of what you think it proves. Had this code been commented, you would have been alerted to the fact that it implements a complex algorithm and that it requires more careful auditing than typical code does. So it should have been commented, and the commenting should have caused you to look at the code extra-carefully." CreationDate="2011-09-07T13:56:45.530" UserId="34200" ContentLicense="CC BY-SA 3.0" />
  <row Id="193053" PostId="45444" Score="1" Text="@Stuart: You're looking at two chunks of code, both with appropriate levels of comments. (This issue is not about the appropriate number of comments, it's about how you judge code based on the number of comments.) One has no comments, the other has tons. Which do you look more closely at? -- Comments are a sign that code is complicated and subtle and thus more likely to have issues." CreationDate="2011-09-07T13:59:30.067" UserId="34200" ContentLicense="CC BY-SA 3.0" />
  <row Id="193076" PostId="482" Score="0" Text="@David: Who and what are you talking about?" CreationDate="2011-09-07T14:44:12.957" UserId="148" ContentLicense="CC BY-SA 3.0" />
  <row Id="193081" PostId="482" Score="0" Text="The question on which I am commenting. Sorry if that wasn't clear." CreationDate="2011-09-07T14:47:15.590" UserId="34200" ContentLicense="CC BY-SA 3.0" />
  <row Id="250042" PostId="45462" Score="0" Text="The third one is a bad comment IMO. Why not `Assert(list.IsEmpty)`?" CreationDate="2012-02-06T12:51:12.113" UserId="8669" ContentLicense="CC BY-SA 3.0" />
  <row Id="223629" PostId="4559" Score="0" Text="Comments of this sort give nice visual cues so you don't have to read every line to find the start of the section you're looking for.  As my grandfather used to say, &quot;everything in moderation.&quot;" CreationDate="2011-11-25T14:24:27.300" UserId="20756" ContentLicense="CC BY-SA 3.0" />
  <row Id="256260" PostId="45462" Score="0" Text="You should not be able to exercise `Assert`s, since they describe things that should not ever happen, even if the public API receives invalid arguments." CreationDate="2012-02-23T08:48:36.120" UserId="8669" ContentLicense="CC BY-SA 3.0" />
  <row Id="256358" PostId="45462" Score="0" Text="@CodeInChaos I retract my opinion. Here is what [Sunacle has to say about assertions](http://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html). It seems you were right. Well, you learn something every day!" CreationDate="2012-02-23T13:28:19.693" UserId="16247" ContentLicense="CC BY-SA 3.0" />
  <row Id="313085" PostId="26828" Score="0" Text="function prime_extjs_uploadform() { response.contentType = 'text/html'; render '{ &quot;success&quot;: true }'; } prime_extjs_uploadform();" CreationDate="2012-09-04T05:27:27.840" UserId="30163" ContentLicense="CC BY-SA 3.0" />
  <row Id="256184" PostId="45462" Score="0" Text="@CodeInChaos IMO `Assert(!list.isEmpty())` is not exactly a contract as in the third comment, but simply behavior (i.e. &quot;throw IllegalArgumentException if the argument is empty&quot;) that must be unit-tested like any other program logic. Note the subtle difference with the comment, which states _when_ the method can be used, but specifies no behavior if the precondition is not met. Even better than the comment would be to enforce compile-time contracts. But this exceeds the scope of my answer ;)" CreationDate="2012-02-23T01:41:37.470" UserId="16247" ContentLicense="CC BY-SA 3.0" />
  <row Id="257707" PostId="45444" Score="0" Text="This is the correct answer." CreationDate="2012-02-27T15:39:41.823" UserId="23309" ContentLicense="CC BY-SA 3.0" />
</comments>
