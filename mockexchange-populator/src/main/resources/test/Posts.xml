<?xml version="1.0" encoding="utf-8"?>
<posts>
  <row Id="1" PostTypeId="1" AcceptedAnswerId="13" CreationDate="2010-09-01T19:34:48.000" Score="100" ViewCount="59408" Body="&lt;p&gt;A coworker of mine believes that &lt;em&gt;any&lt;/em&gt; use of in-code comments (ie, not javadoc style method or class comments) is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Code_smell&quot;&gt;code smell&lt;/a&gt;.  What do you think?&lt;/p&gt;&#xA;" OwnerUserId="6" LastEditorUserId="226" LastEditDate="2011-11-25T22:32:41.300" LastActivityDate="2012-11-27T19:29:27.740" Title="&quot;Comments are a code smell&quot;" Tags="&lt;comments&gt;&lt;anti-patterns&gt;" AnswerCount="34" CommentCount="10" FavoriteCount="76" ClosedDate="2012-11-27T20:11:51.580" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="3" PostTypeId="2" ParentId="1" CreationDate="2010-09-01T19:36:50.053" Score="29" Body="&lt;p&gt;Ideally, code should be so well coded that it should be auto explicative. In the real world, we know that also very high quality code needs sometimes commenting.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What you should absolutely avoid is &quot;comment-code redundancy&quot; (comments that don't add anything to code):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;i++; // Increment i by 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then, if there's a good (and maintained/aligned) code design and documentation, commenting is even less useful.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But in some circumstances comments can be a good aid in code readability:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;while( foo )&#xA;{&#xA;     if( dummy )&#xA;     {&#xA;     }&#xA;     else // !dummy&#xA;     {&#xA;     }&#xA;} // end while( foo )&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Don't forget that you have to maintain and keep in sync also comments... outdated or wrong comments can be a terrible pain! And, as a general rule, commenting too much can be a symptom of bad programming.&lt;/p&gt;&#xA;" OwnerUserId="11" LastEditorUserId="11" LastEditDate="2010-09-01T20:41:14.273" LastActivityDate="2010-09-01T20:41:14.273" CommentCount="17" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="7" PostTypeId="2" ParentId="1" CreationDate="2010-09-01T19:42:16.797" Score="10" Body="&lt;p&gt;I think the answer is the usual &quot;It depends&quot; one.  Commenting code just to comment code is a smell.  Commenting code because you're using an obscure algorithm that's an order of magnitude faster saves the maintenance programmer (usually me 6 months after I wrote it) half a day of poking through the code to determine what it's doing.&lt;/p&gt;&#xA;" OwnerUserId="21" LastActivityDate="2010-09-01T19:42:16.797" CommentCount="0" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="13" PostTypeId="2" ParentId="1" CreationDate="2010-09-01T19:45:33.183" Score="167" Body="&lt;p&gt;Only if the comment describes what the code is doing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If I wanted to know what was happening in a method or block, I would read the code. I would hope, anyway, that any developers working on a given project were at least familiar enough with the development language to read what is written and understand what it is doing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In some cases of extreme optimization, you might be using techniques that makes it difficult for someone to follow what your code is doing. In these cases, comments can and should be used to not only explain why you have such optimizations, but what the code is doing. A good rule of thumb would be to have someone else (or multiple other people) familiar with the implementation language and project look at your code - if they can't understand both the why and the how, then you should comment both the why and the how.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, what's not clear in the code is why you have done something. If you take an approach that might not be obvious to others, you should have a comment that explains why you made the decisions that you did. I would suspect that you might not even realize that a comment is needed until after something like a code review, where people want to know why you did X instead of Y - you can capture your answer in the code for everyone else who looks at it in the future.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The most important thing, though, is to change your comments when you change your code. If you change an algorithm, be sure to update the comments with why you went with algorithm X over Y. Stale comments are an even bigger code smell.&lt;/p&gt;&#xA;" OwnerUserId="4" LastEditorUserId="4" LastEditDate="2010-09-14T22:32:25.190" LastActivityDate="2010-09-14T22:32:25.190" CommentCount="17" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="56" PostTypeId="2" ParentId="1" CreationDate="2010-09-01T20:04:18.167" Score="32" Body="&lt;p&gt;I declare your co-worker a heretic!  Where are my heretic-burnin' boots?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Obsessive commenting is bad and a maintenance headache, and comments are no replacement for well-named methods, classes, variables, etc.  But sometimes putting &lt;i&gt;why&lt;/i&gt; something is the way it is can be immensely valuable for the poor idiot who has to maintain the code in six months -- particularly when that poor idiot winds up being you.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Some actual comments from the code I'm working on:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&#xA;    // If this happens, somebody's been screwing around with the database definitions and&#xA;    // has removed the restriction that a given alarm may have only one entry in the &#xA;    // notifications table.  Bad maintenance programmer!  Bad!  No biscuit!&#xA;&#xA;&#xA;&#xA;    // If an alert is active on our side but inactive on theirs, that might mean&#xA;    // they closed the alert.  (Or that we just haven't told them about it yet.)  The&#xA;    // logic comes later; for now, we'll just compile it in a list.&#xA;&#xA;&#xA;&#xA;    // If we know for a fact that an alarm isn't getting through, we're going to whine pretty&#xA;    // aggressively about it until it gets fixed.&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="17" LastActivityDate="2010-09-01T20:04:18.167" CommentCount="5" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="298" PostTypeId="2" ParentId="1" CreationDate="2010-09-01T23:35:05.320" Score="75" Body="&lt;p&gt;Comments should explain why, not how.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;How&lt;/code&gt; type comments are usually better dealt with using refactoring. Personally, I usually avoid comments in favor of refactoring.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Before: &lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# convert to cents&#xA;a = x * 100&#xA;&#xA;# avg cents per customer &#xA;avg = a / n&#xA;&#xA;# add to list&#xA;avgs &amp;lt; avg&#xA;t += 1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;after:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;total_cents = total * 100&#xA;average_per_customer = total_cents / customer_count&#xA;&#xA;track_average(average_per_customer)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="104" LastEditorUserId="104" LastEditDate="2010-09-02T08:16:25.627" LastActivityDate="2010-09-02T08:16:25.627" CommentCount="6" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="362" PostTypeId="2" ParentId="1" CreationDate="2010-09-02T01:43:44.647" Score="6" Body="&lt;p&gt;If the code has been written in a particular way to avoid a problem present in a library (both a third-party library, or a library that comes with the compiler), then it makes sense to comment it.&lt;br&gt;&#xA;It also make sense to comment code that needs to be changed in future versions, or when using a new version of a library, or when passing from PHP4 to PHP5, for example.&lt;/p&gt;&#xA;" OwnerUserId="44" LastEditorUserId="44" LastEditDate="2010-09-03T12:27:19.637" LastActivityDate="2010-09-03T12:27:19.637" CommentCount="0" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="482" PostTypeId="2" ParentId="1" CreationDate="2010-09-02T16:29:30.517" Score="110" Body="&lt;p&gt;This is particularly irritating to hear at the moment, I spent some time this weekend looking at very well-named, very clean, uncommented code implementing a research algorithm (one that isn't actually published). I'm high-level familiar with it, the guy sitting next to me was the inventor, and the code was written a few years ago by someone else. We could &lt;em&gt;barely&lt;/em&gt; follow it. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Your co-worker is not experienced enough, obviously.&lt;/p&gt;&#xA;" OwnerUserId="148" LastActivityDate="2010-09-02T16:29:30.517" CommentCount="13" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="814" PostTypeId="2" ParentId="1" CreationDate="2010-09-04T00:50:15.103" Score="8" Body="&lt;p&gt;Code comments are definitely not a &quot;code smell&quot;. This belief typically comes from the fact that comments can become stale (out of date) and can be difficult to maintain. However, having good comments which explain why the code is doing something a certain way can (and usually is) important for maintenance.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Good comments make it easier to&#xA;  understand what the code is doing and,&#xA;  more important, why it is doing it a&#xA;  particular way. Comments are meant to&#xA;  be read by programmers and should be&#xA;  clear and precise. A comment that is&#xA;  hard to understand or incorrect isn’t&#xA;  much better than having had no comment&#xA;  at all.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;Adding clear and precise comments to&#xA;  your code means that you don’t have to&#xA;  rely on memory to understand the&#xA;  “what” and “why” of a section of code.&#xA;  This is most important when you look&#xA;  at that code later on, or someone else&#xA;  must look at your code. Because&#xA;  comments become part of the textual&#xA;  content of your code, they should&#xA;  follow good writing principles in&#xA;  addition to being clearly written.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;To&#xA;  write a good comment, you should do&#xA;  your best to document the purpose of&#xA;  the code (the why, not how) and&#xA;  indicate the reasoning and logic&#xA;  behind the code as clearly as&#xA;  possible. Ideally, comments should be&#xA;  written at the same time as you write&#xA;  the code. If you wait, you probably&#xA;  won’t go back and add them.&lt;/p&gt;&#xA;  &#xA;  &lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://rads.stackoverflow.com/amzn/click/0672331012&quot; rel=&quot;nofollow&quot;&gt;Sams Teach Yourself Visual C# 2010 in 24 Hours&lt;/a&gt;, pp 348-349.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;" OwnerUserId="164" LastEditorUserId="591" LastEditDate="2011-03-22T22:24:53.567" LastActivityDate="2011-03-22T22:24:53.567" CommentCount="3" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="1680" PostTypeId="2" ParentId="1" CreationDate="2010-09-09T07:59:23.893" Score="21" Body="&lt;p&gt;I think the rule is quite simple: imagine a complete stranger seeing your code. You probably will be a stranger to your own code in 5 years.&#xA;Try to minimize the mental effort to understand your code for this stranger.&lt;/p&gt;&#xA;" OwnerUserId="552" LastActivityDate="2010-09-09T07:59:23.893" CommentCount="4" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="2787" PostTypeId="2" ParentId="1" CreationDate="2010-09-11T04:52:53.253" Score="26" Body="&lt;p&gt;Categorically defining a method or process as a &quot;code smell&quot; is a &quot;zealotry smell&quot;.  The term is becoming the new &quot;considered harmful&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Please remember that all of these sort of things are supposed to be guidelines.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Many of the other answers give good advice as to when comments are warranted.  &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Personally I use very few comments. Explain the purpose of non-obvious processes and leave the occasional death-threat to anyone that might be considering altering things on their own that required weeks of tuning.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Refactoring everything until a kindergartner can understand it is likely not an efficient use of your time, and probably will not perform as well as a more concise version.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Comments don't affect run time,so the only negative issue to consider is the maintenance.&lt;/p&gt;&#xA;" OwnerUserId="841" LastActivityDate="2010-09-11T04:52:53.253" CommentCount="3" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="2837" PostTypeId="2" ParentId="1" CreationDate="2010-09-11T13:59:29.547" Score="11" Body="&lt;p&gt;A good idea to have the right comments is to start with writing comments.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// This function will do something with the parameters, &#xA;// the parameters should be good according to some rules.&#xA;myFunction(parameters)&#xA;{&#xA;    // It will do some things to get started.&#xA;&#xA;    // It will do more with the stuff.&#xA;&#xA;    // It will end doing things with the stuff.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This allows you to extract methods easily to even get rid of the comments,&lt;br&gt;&#xA;&lt;strong&gt;just let the code tell these things&lt;/strong&gt;! See how this is rewritten (cut/paste) in a very nice way:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// This function will do something with the parameters, &#xA;// the parameters should be good according to some rules.&#xA;myfunction(parameters)&#xA;{&#xA;  var someThing = initializedWithSomething;&#xA;&#xA;  doSomethingWith(someThing);&#xA;&#xA;  doMoreWith(someThing);&#xA;&#xA;  endDoingThingsWith(someThing);&#xA;&#xA;  return someThing;&#xA;}&#xA;&#xA;// This function will do some things to get started,&#xA;// the parameters should be good according to some rules.&#xA;doSomethingWith(parameters)&#xA;{&#xA;  parameters.manipulateInSomeWay();&#xA;  ... etc ...&#xA;}&#xA;&#xA;... etc ...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;For things that can't be separated just don't extract methods and type the code under the comments.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is what I see as an useful way to keep commenting to a minimum, it's really useless to go commenting each line... Only document a single line if it's about a magic value initialization or  where it makes sense.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If parameters are used too much, then they should be private members in your class.&lt;/p&gt;&#xA;" OwnerUserId="666" LastEditorUserId="666" LastEditDate="2010-09-16T21:53:34.267" LastActivityDate="2010-09-16T21:53:34.267" CommentCount="1" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="2885" PostTypeId="2" ParentId="1" CreationDate="2010-09-11T18:08:22.400" Score="4" Body="&lt;p&gt;Of honorable mention is the anti-pattern:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's my impression that sometimes FLOSS license preamples are frequently used &lt;strong&gt;in lieu&lt;/strong&gt; of file documentation. The GPL/BSDL makes a nice filler text, and after that you seldomly see any other comment block.&lt;/p&gt;&#xA;" OwnerUserId="1245" LastActivityDate="2010-09-11T18:08:22.400" CommentCount="0" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="3339" PostTypeId="2" ParentId="1" CreationDate="2010-09-13T20:34:40.617" Score="2" Body="&lt;p&gt;You have to keep a balance between code and comments... Usually I try to add some comments that resume a block of code. Not because I won't be able to understand the code (well, that also), but because I can read faster my own code and locate specific sections where the important stuff it's happening.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Anyway, my own personal criteria is &quot;when in doubt, comment&quot;. I prefer to have a redundant line than a completely cryptic line that I'm not going to be able to understand. I can always remove comments on a code review, after a while (and I usually do)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, comments are quite helpful adding &quot;caveats&quot; like &quot;Be careful! If the format of the input is not ASCII, this code will have to change!&quot;&lt;/p&gt;&#xA;" OwnerUserId="1571" LastActivityDate="2010-09-13T20:34:40.617" CommentCount="1" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="3355" PostTypeId="2" ParentId="1" CreationDate="2010-09-13T21:30:09.243" Score="0" Body="&lt;p&gt;I have to agree with your coworker.  I always say that if I comment my code, it means that I'm worried that &lt;em&gt;I&lt;/em&gt; won't be able to figure out &lt;em&gt;my own code&lt;/em&gt; in the future. This is a bad sign.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The only other reason I sprinkle comments into the code is to call out something that doesn't seem to make sense.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Those comments usually take the form of something like:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//xxx what the heck is this doing??&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// removed in version 2.0, but back for 2.1, now I'm taking out again&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1223" LastActivityDate="2010-09-13T21:30:09.243" CommentCount="3" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="4559" PostTypeId="2" ParentId="1" CreationDate="2010-09-16T22:37:35.737" Score="6" Body="&lt;p&gt;Even the most well-written book still likely has an introduction and chapter titles. Comments in well-documented code are still useful to describe high-level concepts, and explain how the code is organized.&lt;/p&gt;&#xA;" OwnerUserId="2326" LastActivityDate="2010-09-16T22:37:35.737" CommentCount="1" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="4604" PostTypeId="2" ParentId="1" CreationDate="2010-09-17T02:24:03.663" Score="3" Body="&lt;p&gt;Comments that are put in because someone thinks it's ok to have 700 lines in one method are a smell.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Comments that are there because you know if you don't put in a comment, someone will make the same mistake yet again are a smell.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Comments put in because some code analysis tool demands it are also a smell.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;People that won't &lt;em&gt;ever&lt;/em&gt; put in a comment, or write even a little help for other developers are also a smell. I'm amazed at how many people won't write stuff down, but will then turn around and acknowledge they can't remember what they did 3 months ago. I don't like to write docs, but I like to have to tell people the same thing over and over again even less.&lt;/p&gt;&#xA;" OwnerUserId="1865" LastActivityDate="2010-09-17T02:24:03.663" CommentCount="0" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="4877" PostTypeId="2" ParentId="1" CreationDate="2010-09-17T18:52:52.203" Score="1" Body="&lt;h2&gt;Of course comments are a code smell...&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;every programmer knows we all eventually &lt;a href=&quot;https://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered&quot;&gt;turn insane&lt;/a&gt; due to the amount of work, debugging, or just plain madness we run into. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;&quot;Do this!&quot; your project manager says.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You respond, &quot;It can't be done.&quot;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;They say, &quot;Then we will find someone else to do it.&quot;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You say, &quot;OK, well maybe it can be done.&quot;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And then spend the next X number of days.. weeks.. months.. trying to figure it out. Throughout the process, you will try and fail, and try and fail. &lt;strong&gt;We all do this.&lt;/strong&gt; The true answer is there are two types of programmers, those that comment and those that don't. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;1) Those that do are either making their own job easier by documenting for future reference, commenting out failed routines that didn't work (the smell is not deleting them after finding the one that works.), or breaking up the code with comment formatting to &lt;em&gt;hopefully&lt;/em&gt; make it a bit easier to read or understand. Seriously, I can't blame them. But in the end, they snap and then you have this:&#xA;&lt;code&gt;// dammit this code sucks! swear! curse! i hate it! i am going to write something here to vent my anger!!!!&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2) Those that don't are either pretending to be a superhero, or &lt;a href=&quot;http://www.codinghorror.com/blog/2007/06/in-programming-one-is-the-loneliest-number.html&quot; rel=&quot;nofollow noreferrer&quot;&gt;are living in a cave&lt;/a&gt;. They simply have reckless disregard for others, themselves, and could care less about the code, or what meaning it could possibly have for later. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now don't get me wrong.. self-documenting variables and functions can avoid this entirely.. and &lt;strong&gt;&lt;em&gt;trust me&lt;/em&gt;&lt;/strong&gt; you can never do enough code-cleanup. But the simple truth is that as long as you keep backups, you can &lt;strong&gt;ALWAYS&lt;/strong&gt; delete comments.&lt;/p&gt;&#xA;" OwnerUserId="2449" LastEditorUserId="-1" LastEditDate="2017-05-23T12:40:27.887" LastActivityDate="2010-09-17T18:52:52.203" CommentCount="1" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="4939" PostTypeId="2" ParentId="1" CreationDate="2010-09-17T20:19:22.227" Score="1" Body="&lt;p&gt;I'd argue that not using &lt;em&gt;some&lt;/em&gt; comments in your code is a code smell. While I agree that code should be self documenting as much as possible, you hit a certain point where you are going to see code that makes no sense regardless of how well the code is written. I've seen some code in business applications where the comments are pretty much mandatory because:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;You need to do something on a case by case basis and there's no good logic for it.&lt;/li&gt;&#xA;&lt;li&gt;The code will likely change in a year or two when the laws are changed and you want to find it again quickly.&lt;/li&gt;&#xA;&lt;li&gt;Someone edited the code in the past because they didn't understand what the code was doing.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Also, company style guides might tell you to do something a certain way - if they say that your could should have comments outlining what blocks of code in a function is doing, then include the comments. &lt;/p&gt;&#xA;" OwnerUserId="2471" LastActivityDate="2010-09-17T20:19:22.227" CommentCount="0" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="7508" PostTypeId="2" ParentId="1" CreationDate="2010-09-27T06:38:00.463" Score="10" Body="&lt;pre&gt;&lt;code&gt;// Dear me in the future. Please, resolve this problem.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;or&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// You think this code was written by somebody else. &#xA;// No, it wasn't. You ([some name]) did it.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="1483" LastEditorUserId="1483" LastEditDate="2010-09-27T07:37:43.573" LastActivityDate="2010-09-27T07:37:43.573" CommentCount="1" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="7510" PostTypeId="2" ParentId="1" CreationDate="2010-09-27T07:42:40.707" Score="2" Body="&lt;p&gt;Reading this I am reminded on something that I first read (from a longer list, preserved by taking photocopies) some decades back:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Real programmers don't write comments - if it was hard to write it should be hard to read&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;A rather older smell methinks.&lt;/p&gt;&#xA;" OwnerUserId="866" LastActivityDate="2010-09-27T07:42:40.707" CommentCount="0" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="8730" PostTypeId="2" ParentId="1" CreationDate="2010-10-01T11:51:50.070" Score="2" Body="&lt;p&gt;I think code commenting gets a very poor start to life. I don't know about these days, but when I was first being taught programming at school I got assignments of the nature of &quot;Write a program that prints the numbers one to ten on separate lines. Make sure you comment your code.&quot; You'd get marked down if you didn't add comments because commenting your code is a GOOD THING.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But what is there to say about such a trivial process? So you end up writing the classic&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;i++; // add one to the &quot;i&quot; counter.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;just to get a decent grade and, if you've any nous at all, instantly forming a very low opinion of code comments.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Code commenting is not a GOOD THING. It's a SOMETIMES NECESSARY THING, and Thomas Owens in the top answer provides an excellent explanation of the situations in which it's necessary. However, these situations rarely crop up in homework-type assignments.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In many ways, adding a comment should be considered a last-resort choice, when what needs to be said cannot be said clearly in the active parts of the programming language. Although object naming can go stale, various human and computer lack-of-feedback mechanisms make it easy to forget to maintain comments and consequently comments go stale much more quickly than active code. For that reason, where a choice is possible, changing code to make it clearer should always be preferred to annotating unclear code with comments. &lt;/p&gt;&#xA;" OwnerUserId="4232" LastActivityDate="2010-10-01T11:51:50.070" CommentCount="1" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="8823" PostTypeId="2" ParentId="1" CreationDate="2010-10-01T16:46:34.193" Score="0" Body="&lt;p&gt;Code comments giving, where applicable, units of function arguments and returns, structure fields, even local variables can be very handy. Remember the Mars Orbiter!&lt;/p&gt;&#xA;" OwnerDisplayName="dmuir" LastActivityDate="2010-10-01T16:46:34.193" CommentCount="1" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="26676" PostTypeId="2" ParentId="1" CreationDate="2010-12-15T13:21:35.770" Score="0" Body="&lt;p&gt;&lt;strong&gt;Here's my rule-of-thumb:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Write the code and store a short summary of the code in a separate document.&lt;/li&gt;&#xA;&lt;li&gt;Leave the code alone for several days to work on something else.&lt;/li&gt;&#xA;&lt;li&gt;Return to the code.  If you can't immediately understand what it's supposed to do, add the summary to the source file.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="8810" LastActivityDate="2010-12-15T13:21:35.770" CommentCount="0" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="26828" PostTypeId="2" ParentId="1" CreationDate="2010-12-15T22:03:06.010" Score="22" Body="&lt;p&gt;In some cases, no amount of good naming, refactoring etc. can replace a comment. Just look at this real-world example (language is Groovy):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  response.contentType=&quot;text/html&quot;&#xA;  render '{&quot;success&quot;:true}'&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Looks strange, doesn't it? Probably a copy-paste-error? Cries for a bugfix?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now the same with comments:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  // DO NOT TOUCH THE FOLLOWING TWO LINES; the ExtJS UploadForm requires it exactly like that!!!&#xA;  response.contentType=&quot;text/html&quot;  // must be text/html so the browser renders the response within the invisible iframe, where ExtJS can access it&#xA;  render '{&quot;success&quot;:true}'         // ExtJS expects that, otherwise it will call the failure handler instead of the succss handler&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="6617" LastActivityDate="2010-12-15T22:03:06.010" CommentCount="1" CommunityOwnedDate="2011-01-31T09:04:54.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="41753" PostTypeId="2" ParentId="1" CreationDate="2011-01-31T10:04:11.747" Score="3" Body="&lt;p&gt;I'll answer with a question of my own.  Can you find the bug in the uncommented code below?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;tl;dr: The next person to maintain your code might not be as godlike as you are.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; [org 0x7c00]&#xA;&#xA; main:&#xA;  mov ah, 0x0e&#xA;  mov bx, string&#xA;  call strreverse&#xA;  call print&#xA;&#xA; stop:&#xA;  jmp $&#xA;&#xA; strreverse:&#xA;  pusha&#xA;  mov dx, bx&#xA;  mov cx, 0&#xA;&#xA; strreverse_push:&#xA;  mov al, [bx]&#xA;  cmp al, 0&#xA;  je strreverse_pop&#xA;  push ax&#xA;  add bx, 1&#xA;  add cx, 1&#xA;  jmp strreverse_push&#xA;&#xA; strreverse_pop:&#xA;  mov bx, dx&#xA;&#xA; strreverse_pop_loop:&#xA;  cmp cx, 0&#xA;  je strreverse_end&#xA;  pop ax&#xA;  mov [bx], al&#xA;  sub cx, 1&#xA;  add bx, 1&#xA;  jmp strreverse_pop_loop&#xA;&#xA; strreverse_end:&#xA;  popa&#xA;  ret&#xA;&#xA; print:&#xA;  pusha&#xA;&#xA; print_loop:&#xA;  mov al, [bx]&#xA;  cmp al, 1&#xA;  je print_end&#xA;  int 0x10&#xA;  add bx, 1&#xA;  jmp print_loop&#xA;&#xA; print_end:&#xA;  popa&#xA;  ret&#xA; string:&#xA;  db 'Boot up', 0&#xA;&#xA; times 510 -( $ - $$ ) db 0&#xA; dw 0xaa55&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="10562" LastActivityDate="2011-01-31T10:04:11.747" CommentCount="6" CommunityOwnedDate="2011-01-31T10:04:11.747" ContentLicense="CC BY-SA 2.5" />
  <row Id="41776" PostTypeId="2" ParentId="1" CreationDate="2011-01-31T11:43:07.130" Score="1" Body="&lt;p&gt;There's a big fundamental difference between comments and code: comments are a way for people to communicate ideas to other people, whereas code is primarily meant for the computer. There are many aspects in &quot;code&quot; that's also only for humans, like naming and indentation. But comments are written strictly for humans, by humans.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Therefore, writing comments is every bit as difficult as any written human communication! The writer should have a clear conception of who the audience is, and what kind of text they will need. How can you know who will read your comments in ten, twenty years? What if the person is from a completely different culture? Etc. I hope everybody understands this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Even inside the small homogeneous culture I live in, it's just so difficult to communicate ideas to other people. Human communication usually fails, except by accident.&lt;/p&gt;&#xA;" OwnerDisplayName="user15127" LastActivityDate="2011-01-31T11:43:07.130" CommentCount="0" CommunityOwnedDate="2011-01-31T11:43:07.130" ContentLicense="CC BY-SA 2.5" />
  <row Id="41783" PostTypeId="2" ParentId="1" CreationDate="2011-01-31T12:00:57.633" Score="0" Body="&lt;p&gt;Educate your co-worker about the &lt;a href=&quot;http://en.wikipedia.org/wiki/Literate_programming&quot; rel=&quot;nofollow&quot;&gt;Literate Programming&lt;/a&gt; technique.&lt;/p&gt;&#xA;" OwnerUserId="13612" LastActivityDate="2011-01-31T12:00:57.633" CommentCount="0" CommunityOwnedDate="2011-01-31T12:00:57.633" ContentLicense="CC BY-SA 2.5" />
  <row Id="45444" PostTypeId="2" ParentId="1" CreationDate="2011-02-08T13:35:53.190" Score="23" Body="&lt;p&gt;The primary issue here is the meaning of the term &quot;code smell&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Many people (including you, I think) understands a code smell to be something close to an error or at least something that needs to be fixed. Perhaps you think of it as a synonym to &quot;anti-pattern&quot;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;This is not the meaning of the term!&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The code smell metaphor originates from &lt;a href=&quot;http://www.c2.com/cgi/wiki?CodeSmell&quot;&gt;Wards Wiki&lt;/a&gt;, and they stress:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Note that a CodeSmell is a hint that something might be wrong, not a certainty. A perfectly good idiom may be considered a CodeSmell because it's often misused, or because there's a simpler alternative that works in most cases. Calling something a CodeSmell is not an attack; it's simply a sign that a closer look is warranted.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So what does it mean that comments are a code-smell: it means that when you see a comment, you should pause and think: &quot;Hmmm, I sense a hint that something could be improved&quot;. Perhaps you can rename a variable, perform the &quot;extract method&quot;-refactoring -- or perhaps the comment is actually the best solution.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;strong&gt;That is what it means for comments to be code smells.&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;EDIT:&#xA;I just stumpled upon these two articles, which explains it better than me:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://butunclebob.com/ArticleS.TimOttinger.ApologizeIncode&quot;&gt;Apologies In code&lt;/a&gt; &lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?ToNeedComments&quot;&gt;To Need Comments&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="535" LastEditorUserId="535" LastEditDate="2011-11-25T07:43:20.523" LastActivityDate="2011-11-25T07:43:20.523" CommentCount="4" CommunityOwnedDate="2011-02-08T13:35:53.190" ContentLicense="CC BY-SA 3.0" />
  <row Id="45462" PostTypeId="2" ParentId="1" CreationDate="2011-02-08T14:05:32.890" Score="0" Body="&lt;p&gt;No, comments are not a code smell, they are just a tool that can be abused.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Examples of &lt;em&gt;good&lt;/em&gt; comments:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;// I think this is in cm. Further investigation needed!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;// This is a clever way of doing X&lt;/p&gt;&#xA;&#xA;&lt;p&gt;// The list is guaranteed to be non-empty here&lt;/p&gt;&#xA;" OwnerUserId="16247" LastActivityDate="2011-02-08T14:05:32.890" CommentCount="4" CommunityOwnedDate="2011-02-08T14:05:32.890" ContentLicense="CC BY-SA 2.5" />
  <row Id="45463" PostTypeId="2" ParentId="1" CreationDate="2011-02-08T14:10:08.740" Score="0" Body="&lt;p&gt;However code that cannot be understood at all it a much &lt;strong&gt;bigger&lt;/strong&gt; code smell…&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;p&gt;Please give me clean code to work on,&#xA;  however&lt;br&gt;&#xA;  if that is not an option, I&#xA;  would rather have “dirty” code with&#xA;  comments&lt;br&gt;&#xA;  than dirty code without&#xA;  comments.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;" OwnerUserId="1114" LastActivityDate="2011-02-08T14:10:08.740" CommentCount="0" CommunityOwnedDate="2011-02-08T14:10:08.740" ContentLicense="CC BY-SA 2.5" />
  <row Id="52607" PostTypeId="2" ParentId="1" CreationDate="2011-02-27T15:13:27.123" Score="4" Body="&lt;p&gt;I disagree with the idea that writing comments to explain the code are bad. This completely ignores the fact that code has bugs. It might be clear what the code &lt;em&gt;does&lt;/em&gt; without comments. It's less likely to be clear what the code is &lt;em&gt;supposed&lt;/em&gt; to do. Without comments how do you know if the results are wrong, or they're being used incorrectly?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The comments should explain the &lt;em&gt;intent&lt;/em&gt; of the code, so that if there is a mistake, someone reading the comments+code has a chance of finding it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I generally find myself writing inline comments &lt;em&gt;before&lt;/em&gt; I write the code. This way it's clear what I'm trying to write code to do, and reduces getting lost in an algorithm without really knowing what you're trying to do.&lt;/p&gt;&#xA;" OwnerUserId="8107" LastActivityDate="2011-02-27T15:13:27.123" CommentCount="3" CommunityOwnedDate="2011-02-27T15:13:27.123" ContentLicense="CC BY-SA 2.5" />
  <row Id="52655" PostTypeId="2" ParentId="1" CreationDate="2011-02-27T19:21:40.993" Score="0" Body="&lt;p&gt;Most of the words have been taken out of my mouth.  But I suppose to sum it all up: the point of comments is to give a high-level description/explanation of what the code is doing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Moreover, here are a few examples of how I use comments:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;as headings, to indicate the general purpose of a section of code&lt;/li&gt;&#xA;&lt;li&gt;to note where I have cribbed code from and thereby avoid plagiarism&lt;/li&gt;&#xA;&lt;li&gt;occasionally at the ends of blocks, to remind of what block they're the end of&lt;/li&gt;&#xA;&lt;li&gt;to point out that code that may look suspicious is what's intended (e.g. those odd times when a switch case falls through)&lt;/li&gt;&#xA;&lt;li&gt;to explain the maths behind an algorithm&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="11863" LastActivityDate="2011-02-27T19:21:40.993" CommentCount="0" CommunityOwnedDate="2011-02-27T19:21:40.993" ContentLicense="CC BY-SA 2.5" />
  <row Id="84634" PostTypeId="4" CreationDate="2011-06-16T21:15:23.440" Score="0" Body="Questions about writing comments in code." OwnerUserId="13156" LastEditorUserId="13156" LastEditDate="2011-06-16T21:19:02.997" LastActivityDate="2011-06-16T21:19:02.997" CommentCount="0" ContentLicense="CC BY-SA 3.0" />
  <row Id="161518" PostTypeId="4" CreationDate="2012-08-19T08:09:50.103" Score="0" Body="An anti-pattern is a behavior or practice that is common despite being ineffective or counterproductive." OwnerUserId="59134" LastEditorUserId="59134" LastEditDate="2012-08-19T08:12:30.040" LastActivityDate="2012-08-19T08:12:30.040" CommentCount="0" ContentLicense="CC BY-SA 3.0" />
  <row Id="177389" PostTypeId="2" ParentId="1" CreationDate="2012-11-27T18:53:47.370" Score="0" Body="&lt;p&gt;No one said this so far in this thread, so I will:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Type names, variable names, function names, method names and comments are just metadata about your code, and has nothing to do with the machine code that the compiler generates (except the names of the exported and debug symbols of course).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Type names and variable names are your nouns, function and method names are your verbs, with these you describe steps to be done. Comments are for everything else.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Some examples:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;double temperature; // In Kelvins.&#xA;&#xA;&#xA;/**&#xA; * Returns true if ray hits the triangle&#xA; */&#xA;bool castRayOnTriangle(Triangle t, Ray r)&#xA;{&#xA;    //...&#xA;    if (determinant == 0)&#xA;    {&#xA;        /* The ray and the triangle are parallel, no intersection possible.*/&#xA;        return false;&#xA;    }&#xA;    //...&#xA;}&#xA;&#xA;&#xA;/* X algorithm. Visit http://en.wikipedia.org/... for details.*/&#xA;&amp;lt;implementation of something difficult to understand for the layman algorithm. &amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Comments may bacome obsolete, if not updated, but variable and function names can become obsolete too. I recently encountered a &lt;code&gt;bufPtr&lt;/code&gt; field in a C structure, which has nothing to do with buffers or pointers. And I saw a &lt;code&gt;inflateBuffer&lt;/code&gt; function that does not decompress a deflated data but a complete GZIP file... These are as annoying as outdated comments.&lt;/p&gt;&#xA;" OwnerUserId="7431" LastActivityDate="2012-11-27T18:53:47.370" CommentCount="0" CommunityOwnedDate="2012-11-27T18:53:47.370" ContentLicense="CC BY-SA 3.0" />
  <row Id="177394" PostTypeId="2" ParentId="1" CreationDate="2012-11-27T19:29:27.740" Score="0" Body="&lt;p&gt;It doesn't seem like too many answers consider programming in teams.  I'm a senior developer and I tend to write comments aimed at explaining what is otherwise simple for me to understand. &lt;/p&gt;&#xA;&#xA;&lt;p&gt;I see it as a form of posthumous team communication or education. I encourage the team to look through code they are using, but maybe haven't written to understand it better.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A couple of examples just from this week (PHP code):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//Pattern for finding jpeg photos&#xA;//Case insensitive pattern for jpg and jpeg&#xA;const PATTERN_PHOTO = &quot;*.{[jJ][pP][gG],[jJ][pP][eE][gG]}&quot;;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I'd hope the name &lt;code&gt;PATTERN_PHOTO&lt;/code&gt; would be helpful later in code to explain what it does, but without the comments how clear would it be to a junior developer what this specific pattern does?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Same set of code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//Ignore . and .. directories in Linux&#xA;if($file != &quot;.&quot; &amp;amp;&amp;amp; $file != &quot;..&quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There's an expectation that our developers know PHP, but not that they understand the Linux OS we are using for hosting.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, I find these comments to actually increase the overall efficiency of our team for the very little time it takes to write them.  &lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;There's less cases of people rewriting code simply because they don't understand how it works. &quot;I didn't understand how it did what it was supposed to, so I fixed it.&quot; Seriously, I've had to deal with this before.&lt;/li&gt;&#xA;&lt;li&gt;There are less questions asked about individual pieces of code.  Answering the questions just once, usually requires looking up the code and the time for me to re-familiarize myself with it. And sometimes I'll get the same question from more than one person weeks apart. (&lt;em&gt;Yes, it would be on things as simple as the examples above&lt;/em&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Other developers are encouraged and guided to learn on their own.  I'd expect that if they came across &lt;code&gt;//Ignore . and .. directories in Linux&lt;/code&gt; they'd likely hop on Google and would suddenly understand Linux a little bit better.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;" OwnerUserId="50402" LastActivityDate="2012-11-27T19:29:27.740" CommentCount="0" CommunityOwnedDate="2012-11-27T19:29:27.740" ContentLicense="CC BY-SA 3.0" />
</posts>
